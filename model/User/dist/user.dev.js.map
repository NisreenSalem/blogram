{"version":3,"sources":["user.js"],"names":["mongoose","require","userSchema","Schema","username","type","String","required","email","role","password","lastlogin","Date","now","isVerified","accountLevel","profilePicture","coverImage","bio","location","notificationPreferences","gender","profileViewers","Types","ObjectId","ref","followers","blockedUsers","posts","likedPosts","passwordResetToken","passwordResetExpires","accountVerificationToken","accountVerificationExpires","timestamps","User","model","module","exports"],"mappings":"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","sourcesContent":["\r\nconst mongoose = require(\"mongoose\");\r\n\r\n// SCHEMA\r\n\r\nconst userSchema = new mongoose.Schema({\r\n    username: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n    email: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n    role: {\r\n        type: String,\r\n        required: true,\r\n        enum: ['user', 'admin'],\r\n        default: 'user'\r\n    },\r\n    password: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n    lastlogin: {\r\n        type: Date,\r\n        default: Date.now(),\r\n\r\n    },\r\n    isVerified: {\r\n        type: String,\r\n        default: false\r\n    },\r\n    accountLevel: {\r\n        type: String,\r\n        enum: ['bronze', 'sliver', 'gold'],\r\n        default: 'bronze',\r\n\r\n\r\n    },\r\n    profilePicture: {\r\n        type: String,\r\n        default: ''\r\n    },\r\n    coverImage: {\r\n        type: String,\r\n        default: ''\r\n    },\r\n    bio: {\r\n        type: String,\r\n\r\n    },\r\n    location: {\r\n        type: String,\r\n\r\n    },\r\n\r\n    notificationPreferences: {\r\n        email: { type: String, default: true },\r\n\r\n    },\r\n    gender: {\r\n        type: String,\r\n        enum: ['male', 'female', 'prefer not to say']\r\n    },\r\n\r\n    profileViewers: [\r\n        { type: mongoose.Schema.Types.ObjectId, ref: 'User' }\r\n    ],\r\n    followers: [\r\n        { type: mongoose.Schema.Types.ObjectId, ref: 'User' }\r\n    ],\r\n    blockedUsers: [\r\n        { type: mongoose.Schema.Types.ObjectId, ref: 'User' }\r\n    ],\r\n    posts: [\r\n        { type: mongoose.Schema.Types.ObjectId, ref: 'Post' }\r\n    ],\r\n    likedPosts: [\r\n        { type: mongoose.Schema.Types.ObjectId, ref: 'Post' }\r\n    ],\r\n    passwordResetToken:\r\n        { type: String },\r\n\r\n    passwordResetExpires:\r\n        { type: Date },\r\n    accountVerificationToken:\r\n        { type: String },\r\n    accountVerificationExpires:\r\n        { type: Date },\r\n\r\n},\r\n    {\r\n        timestamps: true\r\n    })\r\n\r\n\r\n// COMPILE SCHEMA TO MODEL\r\nconst User = mongoose.model('User', userSchema);\r\nmodule.exports = User;"],"file":"user.dev.js"}